# This is the main configuration file for the application.
# ~~~~~

# Swagger API Documentation
play.modules.enabled += "play.modules.swagger.SwaggerModule"

api.version = "alpha"
swagger.filter = "SwaggerConfigurationFilter"
swagger.api.info = {
  title = "Statistical Business Register Admin Data API Group",
  description = "One of the collection of Sbr Admin Data Apis",
  contact = "SBR Support Team",
  termsOfService = "https://www.ons.gov.uk/help/termsandconditions",
  licence = "MIT",
  licenceUrl = "https://github.com/ONSdigital/sbr-api/blob/master/LICENSE"
}

# Secret key
# ~~~~~
# The secret key is used to secure cryptographics functions.
# If you deploy your application to several instances be sure to use the same key!
# application.secret = "%APPLICATION_SECRET%"
# application.secret = ${?application.secret}
play.crypto.secret = "changeme"
play.crypto.secret = ${?APPLICATION_SECRET}

# The application languages
# ~~~~~
application.langs="en"
play.i18n.langs = [ "en" ]

# Global object class
# ~~~~~
# Define the Global object class for this application.
# Default to Global in the root package.
# application.global=Global

# Router
# ~~~~~
# Define the Router object to use for this application.
# This router will be looked up first when the application is starting up,
# so make sure this is the entry point.
# Furthermore, it's assumed your route file is named properly.
# So for an application router like `my.application.Router`,
# you may need to define a router file `conf/my.application.routes`.
# Default to Routes in the root package (and conf/routes)
# application.router=my.application.Routes

# Database configuration
# ~~~~~
# You can declare as many datasources as you want.
# By convention, the default datasource is named `default`
#
# db.default.driver=org.h2.Driver
# db.default.url="jdbc:h2:mem:play"
# db.default.user=sa
# db.default.password=""

# Evolutions
# ~~~~~
# You can disable evolutions if needed
# evolutionplugin=disabled

## WS (HTTP Client)
# https://www.playframework.com/documentation/latest/ScalaWS#Configuring-WS
# ~~~~~
# The HTTP client primarily used for REST APIs.  The default client can be
# configured directly, but you can also create different client instances
# with customized settings. You must enable this by adding to build.sbt:
#
# libraryDependencies += ws // or javaWs if using java
#
play.ws {
  # Sets HTTP requests not to follow 302 requests
  #followRedirects = false

  # Sets the maximum number of open HTTP connections for the client.
  #ahc.maxConnectionsTotal = 50

  ## WS SSL
  # https://www.playframework.com/documentation/latest/WsSSL
  # ~~~~~
  ssl {
    # Configuring HTTPS with Play WS does not require programming.  You can
    # set up both trustManager and keyManager for mutual authentication, and
    # turn on JSSE debugging in development with a reload.
    #debug.handshake = true
    #trustManager = {
    #  stores = [
    #    { type = "JKS", path = "exampletrust.jks" }
    #  ]
    #}

    loose.acceptAnyCertificate=true
  }

  request.timeout = 15000
  request.timeout = ${?SBR_EXTERNAL_REQUEST_TIMEOUT}
}

# Filters
play.http.filters = filters.Filters

# Thread Pools
admin-data-hbase.hbase.repository {
  executor = "thread-pool-executor"
  throughput = 1
  thread-pool-executor {
    fixed-pool-size = 32
  }
}


# CSV File Load
csv {
  file = "conf/sample/201706/ch-data.csv"
  file = ${?CSV_FILE}
  header.string = "companyname"
  header.string =  ${?HEADER_STRING}

  id.position = 1
  id.position= ${?ROWKEY_POSITION}
}

# Metrics
api.metrics = false
api.metrics = ${?API_METRICS}

artifactory {
  publish.init = false
  publish.init = ${?SBR_PUBLISH_ARTIFACTORY_INIT_TRIGGER}
  publish.repository = "https://Unused/transient/admin-data.repository"
  publish.repository = ${?SBR_PUBLISH_ARTIFACTORY_NAME}
  host = "Unknown Artifactory host"
  host = ${?SBR_PUBLISH_ARTIFACTORY_HOST_NAME}
  user = "Unknown username"
  user = ${?SBR_PUBLISH_ARTIFACTORY_USER_NAME}
  password = "Unknown password"
  password = ${?SBR_PUBLISH_ARTIFACTORY_PASSWORD}
}

# Circuit-breaker
circuit.breaker {
  max.failures = 5
  max.failures = ${?CIRCUIT_BREAKER_MAX_FAILURE}
  call.timeout = 2
  call.timeout = ${?CIRCUIT_BREAKER_CALL_TIMEOUT}
  reset.timeout = 1
  reset.timeout = ${?CIRCUIT_BREAKER_RESET_TIMEOUT}
}

akka.ask.timeout = 2 seconds
akka.ask.timeout = ${?AKKA_TIMEOUT}

# Caching
cache {
  duration = 60
  duration = ${?CACHE_DURATION}
  delimiter = "~"
  delimiter = ${?CACHE_DELIMINTER}
}

# Validation
validation {
  id.regex = ".{3,8}"
  id.regex = ${?VALIDATION_ID}
}


hbase {
  authentication.username = "username"
  authentication.username = ${?HBASE_AUTHENTICATION_USERNAME}

  authentication.password = "password"
  authentication.password = ${?HBASE_AUTHENTICATIONM_PASSWORD}

  rest.endpoint = "http://localhost:8080"
  rest.endpoint = ${?HBASE_REST_ENDPOINT}

  column.family = "d"
  column.family = ${?HBASE_REST_COLUMN_FAMILY}

  namespace = "sbr_local_db"
  namespace = ${?HBASE_NAMESPACE}

  table.name = "admin_data"
  table.name = ${?HBASE_TABLE_NAME}

  initialize = false
  initialize = ${?HBASE_INITIALIZE_DB}
}


hbase {
  authentication {
    username = "username"
    username = ${?HBASE_AUTHENTICATION_USERNAME}

    password = "password"
    password = ${?HBASE_AUTHENTICATION_PASSWORD}
  }

  column.family = "d"
  column.family = ${?HBASE_COLUMN_FAMILY}

  //  table.name = "admin_data"
  table.name = "enterprise"
  table.name = ${?HBASE_TABLE_NAME}

  in.memory {
    namespace = "sbr_local_db"
    namespace = ${?HBASE_IN_MEMORY_NAMESPACE}
  }

  rest {
    namespace = "sbr_local_db"
    namespace = ${?HBASE_NAMESPACE}

    endpoint = "http://localhost:8080"
    endpoint = ${?HBASE_ENDPOINT}
  }

  initialize = false
  initialize = ${?HBASE_INITIALIZE_DB}
}
