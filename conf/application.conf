# This is the main configuration file for the application.
# ~~~~~

# Secret key
# ~~~~~
# The secret key is used to secure cryptographics functions.
# If you deploy your application to several instances be sure to use the same key!
application.secret="%APPLICATION_SECRET%"

# The application languages
# ~~~~~
application.langs="en"
play.i18n.langs = [ "en" ]

# Global object class
# ~~~~~
# Define the Global object class for this application.
# Default to Global in the root package.
# application.global=Global

# Router
# ~~~~~
# Define the Router object to use for this application.
# This router will be looked up first when the application is starting up,
# so make sure this is the entry point.
# Furthermore, it's assumed your route file is named properly.
# So for an application router like `my.application.Router`,
# you may need to define a router file `conf/my.application.routes`.
# Default to Routes in the root package (and conf/routes)
# application.router=my.application.Routes

# Database configuration
# ~~~~~
# You can declare as many datasources as you want.
# By convention, the default datasource is named `default`
#
# db.default.driver=org.h2.Driver
# db.default.url="jdbc:h2:mem:play"
# db.default.user=sa
# db.default.password=""

# Evolutions
# ~~~~~
# You can disable evolutions if needed
# evolutionplugin=disabled

## WS (HTTP Client)
# https://www.playframework.com/documentation/latest/ScalaWS#Configuring-WS
# ~~~~~
# The HTTP client primarily used for REST APIs.  The default client can be
# configured directly, but you can also create different client instances
# with customized settings. You must enable this by adding to build.sbt:
#
# libraryDependencies += ws // or javaWs if using java
#
play.ws {
  # Sets HTTP requests not to follow 302 requests
  #followRedirects = false

  # Sets the maximum number of open HTTP connections for the client.
  #ahc.maxConnectionsTotal = 50

  ## WS SSL
  # https://www.playframework.com/documentation/latest/WsSSL
  # ~~~~~
  ssl {
    # Configuring HTTPS with Play WS does not require programming.  You can
    # set up both trustManager and keyManager for mutual authentication, and
    # turn on JSSE debugging in development with a reload.
    #debug.handshake = true
    #trustManager = {
    #  stores = [
    #    { type = "JKS", path = "exampletrust.jks" }
    #  ]
    #}

    loose.acceptAnyCertificate=true
  }
}


# Filters
play.http.filters = filters.Filters

# Thread Pools
admin-data-hbase.hbase.repository {
  executor = "thread-pool-executor"
  throughput = 1
  thread-pool-executor {
    fixed-pool-size = 32
  }
}

# Caching
cache.admin_data.duration = 60
cache.admin_data.duration = ${?cache.admin_data.duration}
cache.default_period.duration = 60
cache.default_period.duration = ${?cache.default_period.duration}
cache.admin_data.delimiter = "~"
cache.admin_data.delimiter = ${?cache.admin_data.delimiter}

# Circuit Breaker
circuit_breaker.maxFailures = 5
circuit_breaker.maxFailures = ${?circuit_breaker.maxFailures}
circuit_breaker.callTimeout = 1
circuit_breaker.callTimeout = ${?circuit_breaker.callTimeout}
circuit_breaker.resetTimeout = 10
circuit_breaker.resetTimeout = ${?circuit_breaker.resetTimeout}

# Database
database.table = "admin_data"
database.table = ${?HBASE_TABLE}

database.in.memory = false
database.in.memory = ${?DB_IN_MEMORY}

# CSV File Load
csv.file = "conf/sample/201706/ch-data.csv"
csv.file = ${?CSV_FILE}
csv.header.string = "companyname"
csv.header.string =  ${?CSV_HEADER_STRING}

# Metrics
api.metrics = false
api.metrics = ${?API_METRICS}



artifactory {
  publish-init = false
  publish-init = ${?BI_PUBLISH_ARTIFACTORY_INIT_TRIGGER}
  publish-hbase.hbase.repository = "https://Unused/transient/hbase.hbase.repository"
  publish-hbase.hbase.repository = ${?BI_PUBLISH_ARTIFACTORY_NAME}
  host = "Unknown Artifactory host"
  host = ${?BI_PUBLISH_ARTIFACTORY_HOST_NAME}
  user = "Unknown username"
  user = ${?BI_PUBLISH_ARTIFACTORY_USER_NAME}
  password = "Unknown password"
  password = ${?BI_PUBLISH_ARTIFACTORY_PASSWORD}
}

circuit-breaker {
  failure.threshold = 3
  failure.threshold = ${?SBR_CIRCUIT_BREAKER_FAILURE_THRESHOLD}
  failure.declaration.time = 10
  failure.decalration.time = ${?SBR_CIRCUIT_BREAKER_FAILURE_DECLARATION_TIME}
  reset.timeout = 1
  reset.timeout = ${?SBR_CIRCUIT_BREAKER_RESET_TIMEOUT}
}


hbase {
  authentication.username = "username"
  authentication.username = ${?HBASE_AUTHENTICATION_USERNAME}

  authentication.password = "password"
  authentication.password = ${?HBASE_AUTHENTICATIONM_PASSWORD}

  rest.endpoint = "http://localhost:8080"
  rest.endpoint = ${?HBASE_REST_ENDPOINT}
  
  column.family = "d"
  column.family = ${?HBASE_REST_COLUMN_FAMILY}

//  namespace = ""
//  namespace = ${?HBASE_REST_NAMESPACE}
//
//  table.name = "data"
//  table.name = ${?HBASE_REST_TABLE_NAME}

  namespace = "sbr_local_db"
  namespace = ${?HBASE_REST_NAMESPACE}

  table.name = "enterprise"
  table.name = ${?HBASE_REST_TABLE_NAME}

}

ws {
  request.timeout = 15000
  request.timeout = ${?SBR_EXTERNAL_REQUEST_TIMEOUT}
}
